<data window="userDashboard">
{
  "welcome_message": "{{welcome_message}}",
  "login_time": "{{login_time}}",
  "features": [
    {
      "title": "Secure Data Boundary",
      "description": "This data is only visible to authenticated users",
      "icon": "üîí"
    },
    {
      "title": "Server-Side Interpolation",
      "description": "Data from Ruby merged into JSON at render time",
      "icon": "üîÑ"
    },
    {
      "title": "Client-Side Hydration",
      "description": "Check browser console - data is available to JavaScript",
      "icon": "üåä"
    }
  ],
  "api_endpoints": {
    "user": "/api/user",
    "demo_data": "/api/demo-data"
  },
  "authenticated": true
}
</data>

<template>
<div style="max-width: 800px; margin: 0 auto; padding: 2rem;">
  <h1 style="color: #2c3e50; margin-bottom: 2rem;">üéØ {{welcome_message}}</h1>

  <div style="background: #e8f5e8; padding: 1.5rem; border-radius: 8px; margin-bottom: 2rem;">
    <h3>‚úÖ Authentication Successful</h3>
    <p><strong>Login Time:</strong> {{login_time}}</p>
    <p>You're now viewing the authenticated section of the Rhales RSFC demo!</p>
  </div>

  <div style="background: white; padding: 2rem; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); margin-bottom: 2rem;">
    <h2>üéØ RSFC Demo Features</h2>
    <p>This page demonstrates Ruby Single File Components with authentication boundaries:</p>

    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 1.5rem; margin-top: 2rem;">
      {{#each features}}
        <div style="background: #f8f9fa; padding: 1.5rem; border-radius: 8px; text-align: center;">
          <div style="font-size: 2rem; margin-bottom: 1rem;">{{icon}}</div>
          <h3 style="margin-bottom: 1rem;">{{title}}</h3>
          <p style="color: #666; font-size: 0.9rem;">{{description}}</p>
        </div>
      {{/each}}
    </div>
  </div>

  <div style="background: white; padding: 2rem; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); margin-bottom: 2rem;">
    <h2>‚ö° Interactive Demo</h2>
    <p>Click the buttons below to see RSFC hydration and API integration in action:</p>

    <div style="margin: 1.5rem 0;">
      <button id="fetch-user" style="background: #007bff; color: white; padding: 0.75rem 1.5rem; border: none; border-radius: 4px; margin-right: 1rem; cursor: pointer;">
        Fetch User Data
      </button>
      <button id="fetch-demo" style="background: #28a745; color: white; padding: 0.75rem 1.5rem; border: none; border-radius: 4px; margin-right: 1rem; cursor: pointer;">
        Fetch Demo Data
      </button>
      <button id="show-hydrated" style="background: #17a2b8; color: white; padding: 0.75rem 1.5rem; border: none; border-radius: 4px; cursor: pointer;">
        Show Hydrated Data
      </button>
    </div>

    <div id="demo-result" style="margin-top: 1.5rem;"></div>
  </div>

  <div style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 1.5rem; border-radius: 8px; margin-bottom: 2rem;">
    <h3>üí° What's Happening Here?</h3>
    <ul style="margin: 1rem 0; padding-left: 2rem;">
      <li>The JSON data section above is populated with Ruby variables at render time</li>
      <li>This data is then injected into the browser as <code>window.userDashboard</code></li>
      <li>Client-side JavaScript can access this data without additional API calls</li>
      <li>The API endpoints demonstrate fetching fresh data when needed</li>
      <li>CSP nonces are used for security (with additional validation planned)</li>
      <li><em>Note: v0.1.0 - Active development with security improvements in progress</em></li>
    </ul>
  </div>

  <div style="text-align: center;">
    <a href="/logout" style="background: #dc3545; color: white; padding: 0.75rem 2rem; text-decoration: none; border-radius: 4px; margin-right: 1rem;">Logout</a>
    <a href="/" style="background: #6c757d; color: white; padding: 0.75rem 2rem; text-decoration: none; border-radius: 4px;">Back to Home</a>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // This data was hydrated from the server-side Ruby context
  const dashboardData = window.userDashboard;

  console.log('üéâ RSFC Hydration Success!', dashboardData);
  console.log('üîê Authenticated user viewing secure dashboard');

  const resultDiv = document.getElementById('demo-result');

  document.getElementById('fetch-user').addEventListener('click', async function() {
    showLoading();

    try {
      const response = await fetch(dashboardData.api_endpoints.user);
      const data = await response.json();

      showResult('User API Data', data, '#e8f5e8');
    } catch (error) {
      showError('Failed to fetch user data: ' + error.message);
    }
  });

  document.getElementById('fetch-demo').addEventListener('click', async function() {
    showLoading();

    try {
      const response = await fetch(dashboardData.api_endpoints.demo_data);
      const data = await response.json();

      showResult('Demo API Data', data, '#e3f2fd');
    } catch (error) {
      showError('Failed to fetch demo data: ' + error.message);
    }
  });

  document.getElementById('show-hydrated').addEventListener('click', function() {
    showResult('Hydrated Dashboard Data', dashboardData, '#fff3cd');
  });

  function showLoading() {
    resultDiv.innerHTML = '<p style="color: #666;">‚è≥ Loading...</p>';
  }

  function showResult(title, data, bgColor) {
    resultDiv.innerHTML = `
      <div style="background: ${bgColor}; padding: 1.5rem; border-radius: 8px; margin-top: 1rem;">
        <h4>‚úÖ ${title}:</h4>
        <pre style="background: white; padding: 1rem; border-radius: 4px; overflow-x: auto; font-size: 0.9rem;">${JSON.stringify(data, null, 2)}</pre>
      </div>
    `;
  }

  function showError(message) {
    resultDiv.innerHTML = `<p style="color: #dc3545; background: #f8d7da; padding: 1rem; border-radius: 4px;">‚ùå ${message}</p>`;
  }
});
</script>
</template>

<logic>
# Dashboard demonstrates:
# - Secure authentication boundary (only shown when logged in)
# - Server-side data interpolation in JSON data section
# - Client-side hydration with window object
# - Multiple API integration examples
# - CSP nonce support for secure inline scripts
# - Interactive demo of RSFC features
</logic>
